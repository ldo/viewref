#!/usr/bin/python3
#+
# This script allows for convenient viewing of any particular
# page of the API reference for Android, Python 2 or Python 3.
# Invoke it as follows:
#
#      viewref api [class-or-pkg-name]
#
# where api is "android", "python2" or "python3", and it will launch
# your preferred Web browser to view the documentation for the
# specified fully-qualified class or package name in the specified
# API. If class-or-pgk-name is omitted, the overall API summary
# page is displayed.
#
# Examples:
#
#     viewref android android.content.Intent
#     viewref android java.lang
#     viewref android
#     viewref python2 os.path
#     viewref python3 subprocess
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import webbrowser

apis = \
    {
        "android" :
            {
                "urlfmt" : "http://developer.android.com/reference/%(path)s%(suffix)s.html",
                "pathsep" : "/",
                "suffixfn" : lambda path : ("packages", ("/package-summary", "")[len(path) != 0 and path[-1][0].isupper()])[len(path) != 0],
            },
        "python2" :
            {
                "urlfmt" : "http://docs.python.org/library/%(path)s%(suffix)s",
                "pathsep" : ".",
                "suffixfn" : lambda path : ("", ".html")[len(path) != 0],
            },
        "python3" :
            {
                "urlfmt" : "http://docs.python.org/py3k/library/%(path)s%(suffix)s",
                "pathsep" : ".",
                "suffixfn" : lambda path : ("", ".html")[len(path) != 0],
            },
    }

if len(sys.argv) not in (2, 3) :
    raise RuntimeError("expecting exactly one or two args, the API and the fully-qualified class or package name")
#end if

api_name = sys.argv[1]
if not api_name in apis :
    raise RuntimeError("unrecognized API %s" % api_name)
#end if
api = apis[api_name]
if len(sys.argv) > 2 :
    path = sys.argv[2].split(".")
else :
    path = ()
#end if
webbrowser.open_new \
  (
        api["urlfmt"]
    %
        {
            "path" : api["pathsep"].join(path),
            "suffix" : api.get("suffixfn", lambda path : "")(path),
        }
  )
